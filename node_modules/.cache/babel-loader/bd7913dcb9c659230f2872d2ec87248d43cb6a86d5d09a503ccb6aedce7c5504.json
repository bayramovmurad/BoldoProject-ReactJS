{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { initialStates } from \"./initialState\";\nexport const MainReducer = createSlice({\n  name: 'MAIN_SLICE',\n  initialState: initialStates,\n  reducers: {\n    changeStateValue: (state, action) => {\n      // console.log(action);\n      state[action.payload.name] = action.payload.value;\n      const check = action.payload.name.includes('.');\n      if (!check) {\n        state[action.payload.name] = action.payload.value;\n      } else {\n        const groups = action.payload.name.split('.');\n        console.log(groups);\n        if (groups.length == 2) {\n          state[groups[0]][groups[1]] = action.payload.value;\n        } else if (groups.length == 3) {\n          state[groups[0]][groups[1]][groups[2]] = action.payload.value;\n        } else if (groups.length == 4) {\n          state[groups[0]][groups[1]][groups[2]][groups[3]] = action.payload.value;\n        }\n      }\n      // state.username=action.payload\n    }\n  }\n});\n\nexport const Data = MainReducer.reducer;\nexport const {\n  changeStateValue\n} = MainReducer.actions;","map":{"version":3,"names":["createSlice","initialStates","MainReducer","name","initialState","reducers","changeStateValue","state","action","payload","value","check","includes","groups","split","console","log","length","Data","reducer","actions"],"sources":["/Users/muradbayramov/Documents/ReactRealProject/BoldoProject-ReactJS/src/reduxx/MainReducer.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\nimport { initialStates } from \"./initialState\";\r\n\r\n\r\nexport const MainReducer=createSlice({\r\n    name:'MAIN_SLICE',\r\n    initialState:initialStates,\r\n    reducers:{\r\n        changeStateValue:(state,action)=>{\r\n            // console.log(action);\r\n            state[action.payload.name]=action.payload.value\r\n            const check =action.payload.name.includes('.')\r\n            if (!check) {\r\n                state[action.payload.name]=action.payload.value\r\n            }else{\r\n                const groups=action.payload.name.split('.')\r\n                console.log(groups);\r\n                if(groups.length==2){\r\n                    state[groups[0]][groups[1]]=action.payload.value;\r\n                }else if(groups.length==3){\r\n                    state[groups[0]][groups[1]][groups[2]]=action.payload.value;\r\n                }else if(groups.length==4){\r\n                    state[groups[0]][groups[1]][groups[2]][groups[3]]=action.payload.value;\r\n                }\r\n            }\r\n            // state.username=action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const Data =MainReducer.reducer;\r\nexport const {changeStateValue}=MainReducer.actions;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,gBAAgB;AAG9C,OAAO,MAAMC,WAAW,GAACF,WAAW,CAAC;EACjCG,IAAI,EAAC,YAAY;EACjBC,YAAY,EAACH,aAAa;EAC1BI,QAAQ,EAAC;IACLC,gBAAgB,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MAC7B;MACAD,KAAK,CAACC,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,GAACK,MAAM,CAACC,OAAO,CAACC,KAAK;MAC/C,MAAMC,KAAK,GAAEH,MAAM,CAACC,OAAO,CAACN,IAAI,CAACS,QAAQ,CAAC,GAAG,CAAC;MAC9C,IAAI,CAACD,KAAK,EAAE;QACRJ,KAAK,CAACC,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,GAACK,MAAM,CAACC,OAAO,CAACC,KAAK;MACnD,CAAC,MAAI;QACD,MAAMG,MAAM,GAACL,MAAM,CAACC,OAAO,CAACN,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC;QAC3CC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnB,IAAGA,MAAM,CAACI,MAAM,IAAE,CAAC,EAAC;UAChBV,KAAK,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,GAACL,MAAM,CAACC,OAAO,CAACC,KAAK;QACpD,CAAC,MAAK,IAAGG,MAAM,CAACI,MAAM,IAAE,CAAC,EAAC;UACtBV,KAAK,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,GAACL,MAAM,CAACC,OAAO,CAACC,KAAK;QAC/D,CAAC,MAAK,IAAGG,MAAM,CAACI,MAAM,IAAE,CAAC,EAAC;UACtBV,KAAK,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,GAACL,MAAM,CAACC,OAAO,CAACC,KAAK;QAC1E;MACJ;MACA;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAMQ,IAAI,GAAEhB,WAAW,CAACiB,OAAO;AACtC,OAAO,MAAM;EAACb;AAAgB,CAAC,GAACJ,WAAW,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}